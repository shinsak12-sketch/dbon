generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Region {
  id     Int     @id @default(autoincrement())
  name   String
  slug   String  @unique
  places Place[]
}

model Place {
  id            Int       @id @default(autoincrement())
  name          String
  slug          String    @unique
  region        Region    @relation(fields: [regionId], references: [id])
  regionId      Int
  avgRating     Float     @default(0)
  reviewsCount  Int       @default(0)
  reviews       Review[]
  address       String?
  mapUrl        String?
  coverImage    String?
  coverImages   String[]  @default([])
  description   String?   @db.Text
  author        String?
  ownerPassHash String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
  place     Place    @relation(fields: [placeId], references: [id])
  placeId   Int
  rating    Float
  content   String
  author    String?
  imageUrl   String?
  imageUrls  String[] @default([])
  pin       String?
  createdAt DateTime  @default(now())
}

model Setting {
  key       String   @id
  value     String?
  updatedAt DateTime @updatedAt
}

model Season {
  id        Int       @id @default(autoincrement())
  name      String
  year      Int
  slug      String    @unique
  status    String    @default("open")
  startDate DateTime?
  endDate   DateTime?
  events    Event[]
  regs      Registration[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@index([year])
}

model Event {
  id          Int            @id @default(autoincrement())
  seasonId    Int
  name        String
  slug        String         @unique
  roundNo     String?
  organizer   String?
  manager     String?
  beginAt     DateTime?
  endAt       DateTime?
  classType   EventClassType @default(OPEN)
  state       EventState     @default(OVERVIEW)
  mode        EventMode      @default(STROKE)
  adjust      ScoreAdjust    @default(NONE)
  tier        Int            @default(100)
  playedAt    DateTime?
  overview    String?        @db.Text
  rules       String?        @db.Text
  prizes      String?        @db.Text
  season      Season         @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  scores      Score[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  @@index([seasonId])
  @@index([beginAt])
  @@index([endAt])
  @@index([classType])
  @@index([state])
}

model Notice {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.Text
  pinned    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([pinned, createdAt])
}

model Participant {
  id           Int       @id @default(autoincrement())
  name         String
  dept         String?
  nickname     String
  handicap     Float?
  passwordHash String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  scores       Score[]
  regs         Registration[]
  @@unique([nickname])
  @@index([name])
}

model Registration {
  id            Int        @id @default(autoincrement())
  seasonId      Int
  participantId Int
  handicap      Float?
  season        Season      @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  @@unique([seasonId, participantId])
  @@index([seasonId])
  @@index([participantId])
}

model Score {
  id               Int          @id @default(autoincrement())
  eventId          Int
  externalNickname String
  participantId    Int?
  strokes          Int?
  net              Float?
  points           Int?
  rankStroke       Int?
  rankNet          Int?
  rankPoints       Int?
  rawJson          Json?
  matched          Boolean      @default(false)
  event            Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  participant      Participant? @relation(fields: [participantId], references: [id])
  createdAt        DateTime     @default(now())
  @@unique([eventId, externalNickname])
  @@unique([eventId, participantId])
  @@index([eventId])
  @@index([participantId])
  @@index([points])
}

enum EventClassType {
  OPEN
  CLASSIC
  INVITATIONAL
  CHAMPIONSHIP
  MASTERS
  CHALLENGE
  PLAYOFF
}

enum EventState {
  OVERVIEW
  OPEN
  HOLD
  FINISH
  RESULT
}

enum EventMode {
  STROKE
  FOURSOME
}

enum ScoreAdjust {
  NONE
  APPLY
}
