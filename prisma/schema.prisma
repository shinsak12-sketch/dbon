generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== Legacy: 맛집 도메인 =====

model Region {
  id     Int     @id @default(autoincrement())
  name   String
  slug   String  @unique
  places Place[]
}

model Place {
  id            Int       @id @default(autoincrement())
  name          String
  slug          String    @unique

  region        Region    @relation(fields: [regionId], references: [id])
  regionId      Int

  avgRating     Float     @default(0)
  reviewsCount  Int       @default(0)
  reviews       Review[]

  address       String?
  mapUrl        String?

  // 레거시(단일)
  coverImage    String?

  // 새 다중 이미지
  coverImages   String[]  @default([])

  description   String?   @db.Text
  author        String?
  ownerPassHash String?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
  place     Place    @relation(fields: [placeId], references: [id])
  placeId   Int

  rating    Float
  content   String
  author    String?

  // 레거시(단일)
  imageUrl   String?

  // 새 다중 이미지
  imageUrls  String[] @default([])

  // 간단 보호용 PIN
  pin       String?

  createdAt DateTime @default(now())
}

model Setting {
  key       String   @id
  value     String?
  updatedAt DateTime @updatedAt
}

// ===== DBON Championship 도메인 =====

model Season {
  id        Int       @id @default(autoincrement())
  name      String
  year      Int
  slug      String    @unique              // 예: "2025"
  status    String    @default("open")     // open|closed|archived
  startDate DateTime?
  endDate   DateTime?

  events    Event[]
  regs      Registration[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([year])
}

model Event {
  id          Int       @id @default(autoincrement())
  seasonId    Int
  name        String
  slug        String     @unique           // 예: "2025-r1"
  status      String     @default("draft") // draft|open|closed|published
  playedAt    DateTime?

  season      Season     @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  scores      Score[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([seasonId])
  @@index([playedAt])
}

model Participant {
  id           Int       @id @default(autoincrement())
  name         String                 // 실명
  dept         String?                // 소속
  nickname     String                 // 골프존 닉네임(매칭 키)
  handicap     Float?                 // 기본 핸디
  passwordHash String?                // 통일된 필드명
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  scores       Score[]
  regs         Registration[]

  @@unique([nickname])
  @@index([name])
}

model Registration {
  id            Int        @id @default(autoincrement())
  seasonId      Int
  participantId Int
  handicap      Float?     // 시즌별 핸디 오버라이드

  season        Season      @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  createdAt     DateTime    @default(now())

  @@unique([seasonId, participantId])
  @@index([seasonId])
  @@index([participantId])
}

model Score {
  id               Int         @id @default(autoincrement())
  eventId          Int
  externalNickname String      // 업로드 원본 닉네임
  participantId    Int?        // 매칭되면 채움
  strokes          Int?
  net              Float?
  points           Int?
  rankStroke       Int?
  rankNet          Int?
  rankPoints       Int?
  rawJson          Json?
  matched          Boolean     @default(false)

  event            Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  participant      Participant? @relation(fields: [participantId], references: [id])

  createdAt        DateTime    @default(now())

  @@unique([eventId, externalNickname])
  @@unique([eventId, participantId])
  @@index([eventId])
  @@index([participantId])
  @@index([points])
}
