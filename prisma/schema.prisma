generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* =========================
   기존 맛집 도메인
   ========================= */
model Region {
  id     Int     @id @default(autoincrement())
  name   String
  slug   String  @unique
  places Place[]
}

model Place {
  id            Int       @id @default(autoincrement())
  name          String
  slug          String    @unique

  region        Region    @relation(fields: [regionId], references: [id])
  regionId      Int

  avgRating     Float     @default(0)
  reviewsCount  Int       @default(0)
  reviews       Review[]

  address       String?
  mapUrl        String?

  // 레거시(단일) — 지금은 유지
  coverImage    String?

  // 새 다중 이미지
  coverImages   String[]  @default([])

  // 소개/작성/비번
  description   String?   @db.Text
  author        String?
  ownerPassHash String?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
  place     Place    @relation(fields: [placeId], references: [id])
  placeId   Int

  rating    Float
  content   String
  author    String?

  // 레거시(단일)
  imageUrl   String?

  // 새 다중 이미지
  imageUrls  String[] @default([])

  // 간단 보호용 PIN
  pin       String?

  createdAt DateTime @default(now())
}

model Setting {
  key       String   @id          // 예: "heroUrl", "seasonTitle"
  value     String?
  updatedAt DateTime @updatedAt
}

/* =========================
   디비온 챔피언십 도메인 (champ)
   ========================= */

model Season {
  id        Int       @id @default(autoincrement())
  name      String
  year      Int
  slug      String    @unique              // 예: "2024", "2025"
  status    String    @default("open")     // open|closed|archived
  startDate DateTime?
  endDate   DateTime?

  events    Event[]
  regs      Registration[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([year])
}

model Event {
  id          Int       @id @default(autoincrement())
  seasonId    Int
  name        String                     // 예: Round 1
  slug        String     @unique         // 예: "2024-r1"
  status      String     @default("draft")  // draft|open|closed|published
  playedAt    DateTime?                  // 경기 날짜(선택)

  season      Season     @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  scores      Score[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([seasonId])
  @@index([playedAt])
}

model Participant {
  id        Int       @id @default(autoincrement())
  name      String                 // 실명
  dept      String?                // 소속
  nickname  String                 // 골프존 닉네임(매칭 키)
  handicap  Float?                 // 기본 핸디(시즌별 덮어쓰기 가능)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  scores    Score[]
  regs      Registration[]

  @@unique([nickname])             // 전사 한 닉네임 1명 기준
  @@index([name])
}

model Registration {
  id            Int        @id @default(autoincrement())
  seasonId      Int
  participantId Int
  handicap      Float?     // 시즌별 핸디 오버라이드

  season        Season      @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  createdAt     DateTime    @default(now())

  @@unique([seasonId, participantId])       // 시즌 안에서 1회 등록
  @@index([seasonId])
  @@index([participantId])
}

model Score {
  id               Int        @id @default(autoincrement())
  eventId          Int

  // 업로드 원본 닉네임(항상 들어옴)
  externalNickname String

  // 매칭되면 participantId 세팅, 미등록이면 null -> 화면에서 제외하기 쉬움
  participantId    Int?

  strokes          Int?                      // 실제 타수
  net              Float?                    // 넷(핸디 적용) — 선택
  points           Int?                      // 포인트 — 이벤트 규칙에 따라 계산해 저장
  rankStroke       Int?                      // 스트로크 랭킹(캐시)
  rankNet          Int?                      // 넷 랭킹(캐시)
  rankPoints       Int?                      // 포인트 랭킹(캐시)

  rawJson          Json?                     // 업로드 원본 행(백업/감사용)
  matched          Boolean    @default(false)

  event            Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  participant      Participant? @relation(fields: [participantId], references: [id])

  createdAt        DateTime    @default(now())

  // 한 이벤트에서 같은 닉네임 중복 방지 (원본 기준)
  @@unique([eventId, externalNickname])

  // 매칭 후에도 동일 참가자 중복 방지
  @@unique([eventId, participantId])

  @@index([eventId])
  @@index([participantId])
  @@index([points])
}
